plugins {
    id 'idea'
    id 'java-library'
    id 'maven-publish'
    id 'net.neoforged.moddev' version '2.0.78'
}

tasks.named('wrapper', Wrapper).configure {
    distributionType = Wrapper.DistributionType.BIN
}

version = mod_version
group = mod_group_id

repositories {
    flatDir {
        dirs 'libs'
    }
    //mavenLocal()
}

base {
    archivesName = mod_id
}

// Mojang ships Java 21 to end users starting in 1.20.5, so mods should target Java 21.
java.toolchain.languageVersion = JavaLanguageVersion.of(21)

neoForge {
    // Specify the version of NeoForge to use.
    version = project.neo_version

    parchment {
        mappingsVersion = project.parchment_mappings_version
        minecraftVersion = project.parchment_minecraft_version
    }

    // This line is optional. Access Transformers are automatically detected
    // accessTransformers = project.files('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            client()

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        server {
            server()
            programArgument '--nogui'
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            type = "gameTestServer"
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        data {
            data()

            // example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
            // gameDirectory = project.file('run-data')

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }

        // applies to all the run configs above
        configureEach {
            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            systemProperty 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            logLevel = org.slf4j.event.Level.DEBUG
        }
    }

    mods {
        // define mod <-> source bindings
        // these are used to tell the game which sources are for which mod
        // mostly optional in a single mod project
        // but multi mod projects should define one per mod
        "${mod_id}" {
            sourceSet(sourceSets.main)
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

// Sets up a dependency configuration called 'localRuntime'.
// This configuration should be used instead of 'runtimeOnly' to declare
// a dependency that will be present for runtime testing but that is
// "optional", meaning it will not be pulled by dependents of this mod.
configurations {
    runtimeClasspath.extendsFrom localRuntime
}

dependencies {
    implementation 'net.neoforged:neoforge:21.1.164'
    implementation files("./libs/ldlib-neoforge-1.21.1-1.0.35.a.jar")
    implementation files("./libs/configuration-neoforge-1.21.1-3.1.0.jar")
    implementation files("./libs/gtceu-1.21.1-1.4.6.jar")
    implementation files("./libs/alltheores-3.1.6_neoforge_1.21.1.jar")
    implementation files("./libs/almostunified-neoforge-1.21.1-1.2.3.jar")
    implementation files("./libs/appliedenergistics2-19.2.9.jar")
    implementation files("./libs/architectury-13.0.8-neoforge.jar")
    implementation files("./libs/AvaritiaNeo-1.21-1.1.5.jar")
    implementation files("./libs/balm-neoforge-1.21.1-21.0.41.jar")
    implementation files("./libs/buildinggadgets2-1.3.8.jar")
    implementation files("./libs/cloth-config-15.0.140-neoforge.jar")
    implementation files("./libs/Clumps-neoforge-1.21.1-19.0.0.1.jar")
    implementation files("./libs/CodeChickenLib-1.21.1-4.6.0.521.jar")
    implementation files("./libs/curios-neoforge-9.4.2+1.21.1.jar")
    implementation files("./libs/EnderStorage-1.21.1-2.13.0.191.jar")
    implementation files("./libs/forgivingvoid-neoforge-1.21.1-21.1.3.jar")
    implementation files("./libs/ftb-chunks-neoforge-2101.1.8.jar")
    implementation files("./libs/ftb-essentials-neoforge-2101.1.6.jar")
    implementation files("./libs/ftb-library-neoforge-2101.1.12.jar")
    implementation files("./libs/ftb-quests-neoforge-2101.1.9.jar")
    implementation files("./libs/ftb-teams-neoforge-2101.1.2.jar")
    implementation files("./libs/ftb-ultimine-neoforge-2101.1.1.jar")
    implementation files("./libs/ftb-xmod-compat-neoforge-21.1.3.jar")
    implementation files("./libs/geckolib-neoforge-1.21.1-4.7.5.1.jar")
    implementation files("./libs/guideme-21.1.8.jar")
    implementation files("./libs/Jade-1.21.1-NeoForge-15.10.0.jar")
    implementation files("./libs/jei-1.21.1-neoforge-19.21.0.247.jar")
    implementation files("./libs/journeymap-neoforge-1.21.1-6.0.0-beta.44.jar")
    implementation files("./libs/kubejs-neoforge-2101.7.1-build.181.jar")
    implementation files("./libs/kubejsprojecte-1.3.1.jar")
    implementation files("./libs/LibX-1.21.1-6.0.5.jar")
    implementation files("./libs/mininggadgets-1.18.6.jar")
    implementation files("./libs/mob_grinding_utils-1.1.7+mc1.21.1.jar")
    implementation files("./libs/pipez-neoforge-1.21.1-1.2.19.jar")
    implementation files("./libs/Powah-6.2.3.jar")
    implementation files("./libs/ProjectE-1.21.1-PE1.0.1.jar")
    implementation files("./libs/refinedstorage-neoforge-2.0.0-beta.2.jar")
    implementation files("./libs/rhino-2101.2.7-build.74.jar")
    implementation files("./libs/SkyblockBuilder-21.1.13.jar")
    implementation files("./libs/Storage Drawers-neoforge-1.21-13.8.5.jar")
    implementation files("./libs/titanium-1.21-4.0.37.jar")
    implementation files("./libs/trenzalore-neo-6.1.1+mc1.21.1.jar")
    implementation files("./libs/ZeroCore2-1.21.1-2.4.17.jar")
}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
var generateModMetadata = tasks.register("generateModMetadata", ProcessResources) {

    //var orderingValue = "NONE"
    //if (mod_id == "gtceu")
    //{
        //replaceProperties["ordering"] = "AFTER"
    //}

    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            neo_version_range      : neo_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description,
            ordering               : "NONE"
    ]

    inputs.properties replaceProperties
    expand replaceProperties
    from "src/main/templates"
    into "build/generated/sources/modMetadata"
}
// Include the output of "generateModMetadata" as an input directory for the build
// this works with both building through Gradle and the IDE.
sourceSets.main.resources.srcDir generateModMetadata
// To avoid having to run "generateModMetadata" manually, make it run on every project reload
neoForge.ideSyncTask generateModMetadata

// Example configuration to allow publishing using the maven-publish plugin
publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}
